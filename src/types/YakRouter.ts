/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace YakRouter {
  export type FormattedOfferStruct = {
    amounts: BigNumberish[];
    adapters: AddressLike[];
    path: AddressLike[];
    gasEstimate: BigNumberish;
  };

  export type FormattedOfferStructOutput = [
    amounts: bigint[],
    adapters: string[],
    path: string[],
    gasEstimate: bigint
  ] & {
    amounts: bigint[];
    adapters: string[];
    path: string[];
    gasEstimate: bigint;
  };

  export type QueryStruct = {
    adapter: AddressLike;
    tokenIn: AddressLike;
    tokenOut: AddressLike;
    amountOut: BigNumberish;
  };

  export type QueryStructOutput = [
    adapter: string,
    tokenIn: string,
    tokenOut: string,
    amountOut: bigint
  ] & { adapter: string; tokenIn: string; tokenOut: string; amountOut: bigint };

  export type TradeStruct = {
    amountIn: BigNumberish;
    amountOut: BigNumberish;
    path: AddressLike[];
    adapters: AddressLike[];
  };

  export type TradeStructOutput = [
    amountIn: bigint,
    amountOut: bigint,
    path: string[],
    adapters: string[]
  ] & {
    amountIn: bigint;
    amountOut: bigint;
    path: string[];
    adapters: string[];
  };
}

export interface YakRouterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADAPTERS"
      | "DEFAULT_ADMIN_ROLE"
      | "FEE_CLAIMER"
      | "FEE_DENOMINATOR"
      | "MAINTAINER_ROLE"
      | "MIN_FEE"
      | "NAME"
      | "NATIVE"
      | "TRUSTED_TOKENS"
      | "WNATIVE"
      | "adaptersCount"
      | "addMaintainer"
      | "findBestPath"
      | "findBestPathWithGas"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "queryAdapter"
      | "queryNoSplit(uint256,address,address,uint8[])"
      | "queryNoSplit(uint256,address,address)"
      | "recoverAVAX"
      | "recoverERC20"
      | "removeMaintainer"
      | "renounceRole(bytes32,address)"
      | "renounceRole(bytes32)"
      | "revokeRole"
      | "setAdapters"
      | "setAllowanceForWrapping"
      | "setFeeClaimer"
      | "setMinFee"
      | "setTrustedTokens"
      | "supportsInterface"
      | "swapNoSplit"
      | "swapNoSplitFromAVAX"
      | "swapNoSplitToAVAX"
      | "swapNoSplitToAVAXWithPermit"
      | "swapNoSplitWithPermit"
      | "transferOwnership"
      | "trustedTokensCount"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Recovered"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "UpdatedAdapters"
      | "UpdatedFeeClaimer"
      | "UpdatedMinFee"
      | "UpdatedTrustedTokens"
      | "YakSwap"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ADAPTERS",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FEE_CLAIMER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FEE_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAINTAINER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MIN_FEE", values?: undefined): string;
  encodeFunctionData(functionFragment: "NAME", values?: undefined): string;
  encodeFunctionData(functionFragment: "NATIVE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "TRUSTED_TOKENS",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "WNATIVE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "adaptersCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addMaintainer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "findBestPath",
    values: [BigNumberish, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "findBestPathWithGas",
    values: [BigNumberish, AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "queryAdapter",
    values: [BigNumberish, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "queryNoSplit(uint256,address,address,uint8[])",
    values: [BigNumberish, AddressLike, AddressLike, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "queryNoSplit(uint256,address,address)",
    values: [BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "recoverAVAX",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "recoverERC20",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeMaintainer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole(bytes32,address)",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole(bytes32)",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setAdapters",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setAllowanceForWrapping",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeClaimer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTrustedTokens",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swapNoSplit",
    values: [YakRouter.TradeStruct, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapNoSplitFromAVAX",
    values: [YakRouter.TradeStruct, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapNoSplitToAVAX",
    values: [YakRouter.TradeStruct, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapNoSplitToAVAXWithPermit",
    values: [
      YakRouter.TradeStruct,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapNoSplitWithPermit",
    values: [
      YakRouter.TradeStruct,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "trustedTokensCount",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "ADAPTERS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FEE_CLAIMER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FEE_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAINTAINER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MIN_FEE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "NAME", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "NATIVE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "TRUSTED_TOKENS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "WNATIVE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "adaptersCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addMaintainer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "findBestPath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "findBestPathWithGas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "queryAdapter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queryNoSplit(uint256,address,address,uint8[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queryNoSplit(uint256,address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoverAVAX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoverERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeMaintainer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole(bytes32,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAdapters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAllowanceForWrapping",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeClaimer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setMinFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTrustedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapNoSplit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapNoSplitFromAVAX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapNoSplitToAVAX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapNoSplitToAVAXWithPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapNoSplitWithPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trustedTokensCount",
    data: BytesLike
  ): Result;
}

export namespace RecoveredEvent {
  export type InputTuple = [_asset: AddressLike, amount: BigNumberish];
  export type OutputTuple = [_asset: string, amount: bigint];
  export interface OutputObject {
    _asset: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdatedAdaptersEvent {
  export type InputTuple = [_newAdapters: AddressLike[]];
  export type OutputTuple = [_newAdapters: string[]];
  export interface OutputObject {
    _newAdapters: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdatedFeeClaimerEvent {
  export type InputTuple = [
    _oldFeeClaimer: AddressLike,
    _newFeeClaimer: AddressLike
  ];
  export type OutputTuple = [_oldFeeClaimer: string, _newFeeClaimer: string];
  export interface OutputObject {
    _oldFeeClaimer: string;
    _newFeeClaimer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdatedMinFeeEvent {
  export type InputTuple = [_oldMinFee: BigNumberish, _newMinFee: BigNumberish];
  export type OutputTuple = [_oldMinFee: bigint, _newMinFee: bigint];
  export interface OutputObject {
    _oldMinFee: bigint;
    _newMinFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdatedTrustedTokensEvent {
  export type InputTuple = [_newTrustedTokens: AddressLike[]];
  export type OutputTuple = [_newTrustedTokens: string[]];
  export interface OutputObject {
    _newTrustedTokens: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace YakSwapEvent {
  export type InputTuple = [
    _tokenIn: AddressLike,
    _tokenOut: AddressLike,
    _amountIn: BigNumberish,
    _amountOut: BigNumberish
  ];
  export type OutputTuple = [
    _tokenIn: string,
    _tokenOut: string,
    _amountIn: bigint,
    _amountOut: bigint
  ];
  export interface OutputObject {
    _tokenIn: string;
    _tokenOut: string;
    _amountIn: bigint;
    _amountOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface YakRouter extends BaseContract {
  connect(runner?: ContractRunner | null): YakRouter;
  waitForDeployment(): Promise<this>;

  interface: YakRouterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADAPTERS: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  FEE_CLAIMER: TypedContractMethod<[], [string], "view">;

  FEE_DENOMINATOR: TypedContractMethod<[], [bigint], "view">;

  MAINTAINER_ROLE: TypedContractMethod<[], [string], "view">;

  MIN_FEE: TypedContractMethod<[], [bigint], "view">;

  NAME: TypedContractMethod<[], [string], "view">;

  NATIVE: TypedContractMethod<[], [string], "view">;

  TRUSTED_TOKENS: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  WNATIVE: TypedContractMethod<[], [string], "view">;

  adaptersCount: TypedContractMethod<[], [bigint], "view">;

  addMaintainer: TypedContractMethod<
    [addedMaintainer: AddressLike],
    [void],
    "nonpayable"
  >;

  findBestPath: TypedContractMethod<
    [
      _amountIn: BigNumberish,
      _tokenIn: AddressLike,
      _tokenOut: AddressLike,
      _maxSteps: BigNumberish
    ],
    [YakRouter.FormattedOfferStructOutput],
    "view"
  >;

  findBestPathWithGas: TypedContractMethod<
    [
      _amountIn: BigNumberish,
      _tokenIn: AddressLike,
      _tokenOut: AddressLike,
      _maxSteps: BigNumberish,
      _gasPrice: BigNumberish
    ],
    [YakRouter.FormattedOfferStructOutput],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  queryAdapter: TypedContractMethod<
    [
      _amountIn: BigNumberish,
      _tokenIn: AddressLike,
      _tokenOut: AddressLike,
      _index: BigNumberish
    ],
    [bigint],
    "view"
  >;

  "queryNoSplit(uint256,address,address,uint8[])": TypedContractMethod<
    [
      _amountIn: BigNumberish,
      _tokenIn: AddressLike,
      _tokenOut: AddressLike,
      _options: BigNumberish[]
    ],
    [YakRouter.QueryStructOutput],
    "view"
  >;

  "queryNoSplit(uint256,address,address)": TypedContractMethod<
    [_amountIn: BigNumberish, _tokenIn: AddressLike, _tokenOut: AddressLike],
    [YakRouter.QueryStructOutput],
    "view"
  >;

  recoverAVAX: TypedContractMethod<
    [_amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  recoverERC20: TypedContractMethod<
    [_tokenAddress: AddressLike, _tokenAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  removeMaintainer: TypedContractMethod<
    [removedMaintainer: AddressLike],
    [void],
    "nonpayable"
  >;

  "renounceRole(bytes32,address)": TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  "renounceRole(bytes32)": TypedContractMethod<
    [role: BytesLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setAdapters: TypedContractMethod<
    [_adapters: AddressLike[]],
    [void],
    "nonpayable"
  >;

  setAllowanceForWrapping: TypedContractMethod<
    [_wnative: AddressLike],
    [void],
    "nonpayable"
  >;

  setFeeClaimer: TypedContractMethod<
    [_claimer: AddressLike],
    [void],
    "nonpayable"
  >;

  setMinFee: TypedContractMethod<[_fee: BigNumberish], [void], "nonpayable">;

  setTrustedTokens: TypedContractMethod<
    [_trustedTokens: AddressLike[]],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  swapNoSplit: TypedContractMethod<
    [_trade: YakRouter.TradeStruct, _to: AddressLike, _fee: BigNumberish],
    [void],
    "nonpayable"
  >;

  swapNoSplitFromAVAX: TypedContractMethod<
    [_trade: YakRouter.TradeStruct, _to: AddressLike, _fee: BigNumberish],
    [void],
    "payable"
  >;

  swapNoSplitToAVAX: TypedContractMethod<
    [_trade: YakRouter.TradeStruct, _to: AddressLike, _fee: BigNumberish],
    [void],
    "nonpayable"
  >;

  swapNoSplitToAVAXWithPermit: TypedContractMethod<
    [
      _trade: YakRouter.TradeStruct,
      _to: AddressLike,
      _fee: BigNumberish,
      _deadline: BigNumberish,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  swapNoSplitWithPermit: TypedContractMethod<
    [
      _trade: YakRouter.TradeStruct,
      _to: AddressLike,
      _fee: BigNumberish,
      _deadline: BigNumberish,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  trustedTokensCount: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADAPTERS"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "FEE_CLAIMER"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "FEE_DENOMINATOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAINTAINER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MIN_FEE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "NAME"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "NATIVE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "TRUSTED_TOKENS"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "WNATIVE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "adaptersCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addMaintainer"
  ): TypedContractMethod<[addedMaintainer: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "findBestPath"
  ): TypedContractMethod<
    [
      _amountIn: BigNumberish,
      _tokenIn: AddressLike,
      _tokenOut: AddressLike,
      _maxSteps: BigNumberish
    ],
    [YakRouter.FormattedOfferStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "findBestPathWithGas"
  ): TypedContractMethod<
    [
      _amountIn: BigNumberish,
      _tokenIn: AddressLike,
      _tokenOut: AddressLike,
      _maxSteps: BigNumberish,
      _gasPrice: BigNumberish
    ],
    [YakRouter.FormattedOfferStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "queryAdapter"
  ): TypedContractMethod<
    [
      _amountIn: BigNumberish,
      _tokenIn: AddressLike,
      _tokenOut: AddressLike,
      _index: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "queryNoSplit(uint256,address,address,uint8[])"
  ): TypedContractMethod<
    [
      _amountIn: BigNumberish,
      _tokenIn: AddressLike,
      _tokenOut: AddressLike,
      _options: BigNumberish[]
    ],
    [YakRouter.QueryStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "queryNoSplit(uint256,address,address)"
  ): TypedContractMethod<
    [_amountIn: BigNumberish, _tokenIn: AddressLike, _tokenOut: AddressLike],
    [YakRouter.QueryStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "recoverAVAX"
  ): TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "recoverERC20"
  ): TypedContractMethod<
    [_tokenAddress: AddressLike, _tokenAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeMaintainer"
  ): TypedContractMethod<
    [removedMaintainer: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceRole(bytes32,address)"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceRole(bytes32)"
  ): TypedContractMethod<[role: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAdapters"
  ): TypedContractMethod<[_adapters: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAllowanceForWrapping"
  ): TypedContractMethod<[_wnative: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFeeClaimer"
  ): TypedContractMethod<[_claimer: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMinFee"
  ): TypedContractMethod<[_fee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTrustedTokens"
  ): TypedContractMethod<[_trustedTokens: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "swapNoSplit"
  ): TypedContractMethod<
    [_trade: YakRouter.TradeStruct, _to: AddressLike, _fee: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swapNoSplitFromAVAX"
  ): TypedContractMethod<
    [_trade: YakRouter.TradeStruct, _to: AddressLike, _fee: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "swapNoSplitToAVAX"
  ): TypedContractMethod<
    [_trade: YakRouter.TradeStruct, _to: AddressLike, _fee: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swapNoSplitToAVAXWithPermit"
  ): TypedContractMethod<
    [
      _trade: YakRouter.TradeStruct,
      _to: AddressLike,
      _fee: BigNumberish,
      _deadline: BigNumberish,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swapNoSplitWithPermit"
  ): TypedContractMethod<
    [
      _trade: YakRouter.TradeStruct,
      _to: AddressLike,
      _fee: BigNumberish,
      _deadline: BigNumberish,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "trustedTokensCount"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "Recovered"
  ): TypedContractEvent<
    RecoveredEvent.InputTuple,
    RecoveredEvent.OutputTuple,
    RecoveredEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "UpdatedAdapters"
  ): TypedContractEvent<
    UpdatedAdaptersEvent.InputTuple,
    UpdatedAdaptersEvent.OutputTuple,
    UpdatedAdaptersEvent.OutputObject
  >;
  getEvent(
    key: "UpdatedFeeClaimer"
  ): TypedContractEvent<
    UpdatedFeeClaimerEvent.InputTuple,
    UpdatedFeeClaimerEvent.OutputTuple,
    UpdatedFeeClaimerEvent.OutputObject
  >;
  getEvent(
    key: "UpdatedMinFee"
  ): TypedContractEvent<
    UpdatedMinFeeEvent.InputTuple,
    UpdatedMinFeeEvent.OutputTuple,
    UpdatedMinFeeEvent.OutputObject
  >;
  getEvent(
    key: "UpdatedTrustedTokens"
  ): TypedContractEvent<
    UpdatedTrustedTokensEvent.InputTuple,
    UpdatedTrustedTokensEvent.OutputTuple,
    UpdatedTrustedTokensEvent.OutputObject
  >;
  getEvent(
    key: "YakSwap"
  ): TypedContractEvent<
    YakSwapEvent.InputTuple,
    YakSwapEvent.OutputTuple,
    YakSwapEvent.OutputObject
  >;

  filters: {
    "Recovered(address,uint256)": TypedContractEvent<
      RecoveredEvent.InputTuple,
      RecoveredEvent.OutputTuple,
      RecoveredEvent.OutputObject
    >;
    Recovered: TypedContractEvent<
      RecoveredEvent.InputTuple,
      RecoveredEvent.OutputTuple,
      RecoveredEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "UpdatedAdapters(address[])": TypedContractEvent<
      UpdatedAdaptersEvent.InputTuple,
      UpdatedAdaptersEvent.OutputTuple,
      UpdatedAdaptersEvent.OutputObject
    >;
    UpdatedAdapters: TypedContractEvent<
      UpdatedAdaptersEvent.InputTuple,
      UpdatedAdaptersEvent.OutputTuple,
      UpdatedAdaptersEvent.OutputObject
    >;

    "UpdatedFeeClaimer(address,address)": TypedContractEvent<
      UpdatedFeeClaimerEvent.InputTuple,
      UpdatedFeeClaimerEvent.OutputTuple,
      UpdatedFeeClaimerEvent.OutputObject
    >;
    UpdatedFeeClaimer: TypedContractEvent<
      UpdatedFeeClaimerEvent.InputTuple,
      UpdatedFeeClaimerEvent.OutputTuple,
      UpdatedFeeClaimerEvent.OutputObject
    >;

    "UpdatedMinFee(uint256,uint256)": TypedContractEvent<
      UpdatedMinFeeEvent.InputTuple,
      UpdatedMinFeeEvent.OutputTuple,
      UpdatedMinFeeEvent.OutputObject
    >;
    UpdatedMinFee: TypedContractEvent<
      UpdatedMinFeeEvent.InputTuple,
      UpdatedMinFeeEvent.OutputTuple,
      UpdatedMinFeeEvent.OutputObject
    >;

    "UpdatedTrustedTokens(address[])": TypedContractEvent<
      UpdatedTrustedTokensEvent.InputTuple,
      UpdatedTrustedTokensEvent.OutputTuple,
      UpdatedTrustedTokensEvent.OutputObject
    >;
    UpdatedTrustedTokens: TypedContractEvent<
      UpdatedTrustedTokensEvent.InputTuple,
      UpdatedTrustedTokensEvent.OutputTuple,
      UpdatedTrustedTokensEvent.OutputObject
    >;

    "YakSwap(address,address,uint256,uint256)": TypedContractEvent<
      YakSwapEvent.InputTuple,
      YakSwapEvent.OutputTuple,
      YakSwapEvent.OutputObject
    >;
    YakSwap: TypedContractEvent<
      YakSwapEvent.InputTuple,
      YakSwapEvent.OutputTuple,
      YakSwapEvent.OutputObject
    >;
  };
}
